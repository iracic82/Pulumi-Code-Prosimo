import pulumi
from pulumi_aws import ec2, get_availability_zones
from pulumi_tls import PrivateKey

class AwsInfrastructure(pulumi.ComponentResource):
    def __init__(self, name, aws_vpc_cidr, subnets, instance_type, key_pair_name, user_data_path, opts=None):
        super().__init__('custom:module:AwsInfrastructure', name, None, opts)

        # Create a VPC
        self.vpc = ec2.Vpc(name, cidr_block=aws_vpc_cidr, tags={'Name': name})

        # Get availability zones
        azs = get_availability_zones().names

        # Create subnets
        self.subnets = [ec2.Subnet(f'{name}-subnet-{i}',
                                   vpc_id=self.vpc.id,
                                   cidr_block=subnet['subnet_cidr'],
                                   availability_zone=azs[0],
                                   tags={'Name': subnet['subnet_name']})
                        for i, subnet in enumerate(subnets)]

        # Create an Internet Gateway
        self.igw = ec2.InternetGateway(name, vpc_id=self.vpc.id, tags={'Name': name})

        # Create a Route Table
        self.route_table = ec2.RouteTable(name, vpc_id=self.vpc.id, tags={'Name': name})

        # Associate Route Table with each subnet
        self.route_table_associations = [ec2.RouteTableAssociation(f'{name}-rta-{i}',
                                                                   route_table_id=self.route_table.id,
                                                                   subnet_id=subnet.id)
                                         for i, subnet in enumerate(self.subnets)]

        # Create a default route
        self.route = ec2.Route(f'{name}-route-igw', destination_cidr_block='0.0.0.0/0',
                               gateway_id=self.igw.id, route_table_id=self.route_table.id)

        # Create a Security Group
        self.sg = ec2.SecurityGroup(f'{name}-security-group', vpc_id=self.vpc.id,
            ingress=[
                ec2.SecurityGroupIngressArgs(
                    description='SSH',
                    from_port=22,
                    to_port=22,
                    protocol='tcp',
                    cidr_blocks=['0.0.0.0/0']
                ),
                ec2.SecurityGroupIngressArgs(
                    description='HTTP',
                    from_port=5000,
                    to_port=5000,
                    protocol='tcp',
                    cidr_blocks=['10.0.0.0/24', '10.1.0.0/24', '10.2.0.0/24', '10.3.0.0/24', '10.4.0.0/24', '10.5.0.0/24']
                ),
                # Add more ingress rules as needed
            ],
            egress=[
                ec2.SecurityGroupEgressArgs(
                    from_port=0,
                    to_port=0,
                    protocol='-1',
                    cidr_blocks=['0.0.0.0/0']
                )
            ],
            tags={'Name': f'{name}-security-group'}
        )

        # Create SSH Key Pair
        rsa_key = PrivateKey(f'{name}-rsa-key', algorithm='RSA', rsa_bits=4096)
        self.key_pair = ec2.KeyPair(key_pair_name, public_key=rsa_key.public_key_openssh)

        # Load user data script
        with open('aws.sh', 'r') as user_data_file:
            user_data = user_data_file.read()
        

        ami = ec2.get_ami(
            most_recent=True,
            owners=["amazon"],
            filters=[{"name": "name", "values": ["amzn2-ami-kernel-5*"]}]
        )

        self.ami_id = ami.id
        # Create EC2 Instances
        self.instances = [ec2.Instance(f'{name}-instance-{i}',
                                       ami=ami.id,  # Replace with your AMI ID
                                       instance_type=instance_type,
                                       key_name=self.key_pair.key_name,
                                       subnet_id=subnet.id,
                                       user_data=user_data,
                                       vpc_security_group_ids=[self.sg.id],
                                       tags={'Name': f'{name}-instance-{i}'})
                          for i, subnet in enumerate(self.subnets)]

        # Create Elastic IPs for each EC2 instance
        self.eips = [ec2.Eip(f'{name}-eip-{i}',domain='vpc', instance=self.instances[i].id)
                     for i in range(len(self.instances))]

        self.register_outputs({})

# Example usage of the AwsInfrastructure class

